---
"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json"
name: cpp2

variables:
  identifier: '[_[:alpha:]][_[:alnum:]]*'
  namespaced_identifier: '((?:{{identifier}}::)*)({{identifier}})'
  colon: ':(?:[\s]+|$)'
  coloncolon: '::'
  expression_end: '[;{}()\[\]<=>]|$'
  parameter_modifier: 'in|out|inout|copy|move|forward|implicit\s+out|(?:virtual|override|final)\s+(?:in|inout)'
  variable_modifier: 'copy|move|inout'
  return_modifier: 'forward'
  member_modifier: 'public|private|protected'
  template_begin: '<(?![<>=])'

patterns:
- include: '#cpp1-block'
- include: '#comment'
- include: '#type-alias-definition'
- include: '#namespace-alias-definition'
- include: '#enum-definition'
- include: '#type-definition'
- include: '#namespace-definition'
- include: '#function-definition'
- include: '#scoped-code-block'
- include: '#statement'

repository:
  punctuation-comma:
    name: punctuation.separator.comma.cpp2
    match: ','

  expression:
    name: meta.expression.cpp2
    patterns:
    - include: '#comment'
    - include: '#inspect'
    - include: '#as'
    - include: '#cast'
    - include: '#is'
    - include: '#unnamed-function'
    - include: '#numeric-range'
    - include: '#literals'
    - include: '#operators'
    - include: '#new'
    - include: '#function-call'
    - include: '#type-alias-definition'
    - include: '#namespace-alias-definition'
    - include: '#variable-definition-typed'
    - include: '#variable-definition-auto'
    - include: '#known-std-symbols'
    - include: '#variable-name'
    - include: '#tuple'
    - include: '#parenthesized-expression'
  
  type-expression:
    name: meta.type-expression.cpp2
    patterns:
    - name: meta.auto-type.cpp2
      match: \b(_)\b
      captures:
        '1': { name: keyword.other.auto.cpp2 }
    - include: '#type-tuple'
    - include: '#decltype'
    - include: '#type'
  
  type-tuple:
    name: meta.type.tuple.cpp2
    begin: \(
    beginCaptures:
      '0': {name: punctuation.definition.tuple.begin.cpp2}
    end: \)
    endCaptures:
      '0': {name: punctuation.definition.tuple.end.cpp2}
    patterns:
    - include: '#comment'
    - include: '#typed-parameter'
    - include: '#punctuation-comma'

  parenthesized-expression:
    name: meta.parenthesized-expression.cpp2
    begin: \(
    beginCaptures:
      '0': {name: punctuation.definition.expression.begin.cpp2}
    end: \)
    endCaptures:
      '0': {name: punctuation.definition.expression.end.cpp2}
    patterns:
    - include: '#expression'

  return-statement:
    name: meta.return-statement.cpp2
    begin: \b(return)\b
    beginCaptures:
      "1": { name: keyword.control.return.cpp2 }
    end: (;)
    endCaptures:
      "1": { name: punctuation.terminator.statement.cpp2 }
    patterns:
    - include: '#expression'

  statement:
    name: meta.statement.cpp2
    patterns:
    - include: '#return-statement'
    - include: '#if'
    - include: '#else-if'
    - include: '#else'
    - include: '#while'
    - include: '#labeled-while'
    - include: '#continue'
    - include: '#break'
    - include: '#next'
    - include: '#for'
    - include: '#labeled-for'
    - include: '#do'
    - include: '#labeled-do'
    - include: '#scoped-code-block-with-local-variables-start'
    - include: '#expression'

  namespace-access:
    patterns:
    - begin: (?:({{identifier}})(::))
      beginCaptures:
        "1": { name: entity.name.namespace.cpp2 }
        "2": { name: punctuation.static-accessor.cpp2 }
      end: (?={{identifier}}[^\w:])
      patterns:
      - include: '#namespace-access'

  variable-name:
    name: meta.entity.variable.cpp2
    match: '{{namespaced_identifier}}'
    captures:
      "1": 
        patterns: 
        - include: '#namespace-access'
      "2": { name: entity.name.variable.cpp2 }

  namespace-alias-definition:
    name: meta.definition.namespace-alias.cpp2
    begin: |
      (?x)
      {{namespaced_identifier}}\s*
      ({{colon}})\s*
      \b(namespace)\b\s*
      (==)\s*
    beginCaptures:
      "1": 
        patterns: 
        - include: '#namespace-access'
      "2": { name: entity.name.variable.declaration.cpp2 }
      "3": { name: punctuation.separator.colon.cpp2 }
      "4": { name: keyword.other.namespace-alias.cpp2 }
      "5": { name: keyword.operator.assignment.cpp2 }
    end: (?<=;)
    patterns:
    - include: '#namespace-name'
  
  namespace-name:
    name: meta.definition.namespace.cpp2
    match: '{{namespaced_identifier}}'
    captures:
      "1": 
        patterns: 
        - include: '#namespace-access'
      "2": { name: entity.name.namespace.cpp2 }

  type-alias-definition:
    name: meta.definition.type-alias.cpp2
    begin: |
      (?x)
      {{namespaced_identifier}}\s*
      ({{colon}})\s*
      (.*?)\s*
      \b(type)\b\s*
      (==)\s*
    beginCaptures:
      "1":
        patterns:
        - include: '#namespace-access'
      "2": { name: entity.name.type.declaration.cpp2 }
      "3": { name: punctuation.separator.colon.cpp2 }
      "4":
        patterns:
        - include: '#template'
      "5": { name: keyword.other.type-alias.cpp2 }
      "6": { name: keyword.operator.assignment.cpp2 }
    end: (?<=;)
    patterns:
    - include: '#type'
  
  namespace-definition:
    name: meta.definition.namespace.cpp2
    begin: |
      (?x)
      ({{identifier}})\s*
      (:)\s*
      \b(namespace)\b\s*
      ([=])
    beginCaptures:
      "1": { name: entity.name.type.declaration.cpp2 }
      "2": { name: punctuation.separator.colon.cpp2 }
      "3": { name: keyword.other.namespace.cpp2 }
      "4": { name: keyword.operator.assignment.cpp2 }
    end: (?<=})
    patterns:
    - include: '#scoped-namespace-block'

  scoped-namespace-block:
    begin: (\{)
    beginCaptures:
      "1": { name: punctuation.curlybrace.open.cpp2 }
    end: (\})
    endCaptures:
      "1": { name: punctuation.curlybrace.close.cpp2 }
    patterns:
    - include: '#namespace-block-content'

  namespace-block-content:
    patterns:
    - include: '#cpp1-block'
    - include: '#comment'
    - include: '#type-alias-definition'
    - include: '#namespace-alias-definition'
    - include: '#enum-definition'
    - include: '#type-definition'
    - include: '#namespace-definition'
    - include: '#function-definition'
    - include: '#scoped-code-block'
    - include: '#statement'



  enum-definition:
    name: meta.definition.enum.cpp2
    begin: |
      (?x)
      ({{identifier}})\s*
      (:)\s*
      (@enum|@flag_enum)\s*
      \b(type)\b\s*
      ([=])
    beginCaptures:
      "1": { name: entity.name.type.declaration.cpp2 }
      "2": { name: punctuation.separator.colon.cpp2 }
      "3":
        patterns:
        - include: '#annotation'
      "4": { name: keyword.other.type.cpp2 }
      "5": { name: keyword.operator.assignment.cpp2 }
    end: (?<=\})
    patterns:
    - include: '#scoped-enum-block' 

  scoped-enum-block:
    begin: (\{)
    beginCaptures:
      "1": { name: punctuation.curlybrace.open.cpp2 }
    end: (\})
    endCaptures:
      "1": { name: punctuation.curlybrace.close.cpp2 }
    patterns:
    - include: '#enum-block-content'

  enum-block-content:
    patterns:
    - include: '#comment'
    - match: |
        (?x)
        ({{identifier}})\s*
        ([;])
      captures:
        "1": { name: variable.other.enummember.cpp2 }
        "2": { name: punctuation.terminator.statement.cpp2 }
    - begin: |
        (?x)
        ({{identifier}})\s*
        (:=)\s*
      beginCaptures:
        "1": { name: variable.other.enummember.cpp2 }
        "2": { name: keyword.operator.assignment.cpp2 }
      end: (?=[;])
      patterns:
      - include: '#expression'

  type-definition:
    name: meta.definition.type.cpp2
    begin: |
      (?x)
      ({{identifier}})\s*
      (:)\s*
      (.*?)\s*
      \b(type)\b\s*
      ([=])
    beginCaptures:
      "1": { name: entity.name.type.declaration.cpp2 }
      "2": { name: punctuation.separator.colon.cpp2 }
      "3":
        patterns:
        - include: '#annotation'
        - include: '#type-modifier'
        - include: '#template'
      "4": { name: keyword.other.type.cpp2 }
      "5": { name: keyword.operator.assignment.cpp2 }
    end: (?<=\})
    patterns:
    - include: '#scoped-type-block' 

  type-modifier:
    name: storage.modifier.cpp2
    match: \b(final)\b

  annotation:
    name: meta.annotation.cpp2
    match: (@)({{identifier}})
    captures:
      "1": { name: punctuation.definition.annotation.cpp2 }
      "2": { name: entity.name.type.annotation.cpp2 }
  
  value-template-parameter:
    begin: ({{identifier}})\s*(:)
    beginCaptures:
      "1": { name: storage.constant.template.cpp2 }
      "2": { name: punctuation.separator.colon.cpp2 }
    end: (?=[,>])
    patterns:
    - include: '#type'

  type-template-parameter:
    begin: ({{identifier}})
    beginCaptures:
      "1": { name: entity.name.type.template.cpp2 }
    end: (?=[,>])
    patterns:
    - include: '#type'

  template-parameter:
    patterns:
    - include: '#value-template-parameter'
    - include: '#type-template-parameter'

  template:
    name: meta.template.cpp2
    begin: ({{template_begin}})
    beginCaptures:
      "1": { name: punctuation.anglebracket.open.cpp2 }
    end: (>)
    endCaptures:
      "1": { name: punctuation.anglebracket.close.cpp2 }
    patterns:
    - include: '#template-parameter'
    - include: '#punctuation-comma'

  scoped-type-block:
    begin: (\{)
    beginCaptures:
      "1": { name: punctuation.curlybrace.open.cpp2 }
    end: (\})
    endCaptures:
      "1": { name: punctuation.curlybrace.close.cpp2 }
    patterns:
    - include: '#type-block-content'

  member-modifier:
    name: storage.modifier.cpp2
    match: \b({{member_modifier}})\b

  type-block-content:
    patterns:
    - include: '#comment'
    - include: '#member-modifier'
    - include: '#operator-definition'
    - include: '#function-definition'
    - include: '#variable-definition-typed'
    - include: '#variable-definition-auto'

  variable-inline-definition-typed:
    name: meta.definition.variable-typed.cpp2
    begin: |
      (?x)
      {{namespaced_identifier}}\s*
      (?={{colon}})
    beginCaptures:
      "1": 
        patterns: 
        - include: '#namespace-access'
      "2": { name: entity.name.variable.declaration.cpp2 }
    end: (?=\))
    patterns:
    - include: '#typing'
    - include: '#assignment-for-inline-variable'

  variable-inline-definition-auto:
    name: meta.definition.variable-auto.cpp2
    begin: |
      (?x)
      {{namespaced_identifier}}\s*
      (:)(?=[=])
    beginCaptures:
      "1": 
        patterns: 
        - include: '#namespace-access'
      "2": { name: entity.name.variable.declaration.cpp2 }
      "3": { name: punctuation.separator.colon.cpp2 }
    end: (?<=[,\)])
    patterns:
    - include: '#assignment-for-inline-variable'

  assignment-for-inline-variable:
    name: meta.assignment-for-inline-variable.cpp2
    begin: |
      (?x)
      (=)\s*
    beginCaptures:
      "1": { name: keyword.operator.assignment.cpp2 }
    end: (?=[,)])
    patterns:
    - include: '#expression'

  variable-definition-typed:
    name: meta.definition.variable-typed.cpp2
    begin: |
      (?x)
      {{namespaced_identifier}}\s*
      (?={{colon}})
    beginCaptures:
      "1": 
        patterns:
        - include: '#namespace-access'
      "2":
        name: entity.name.variable.declaration.cpp2
        patterns:
        - include: '#this'
    end: (?<=;)
    patterns:
    - include: '#typing'
    - include: '#assignment'

  variable-definition-auto:
    name: meta.definition.variable-auto.cpp2
    begin: |
      (?x)
      {{namespaced_identifier}}\s*
      (:)(?=[=])
    beginCaptures:
      "1": 
        patterns: 
        - include: '#namespace-access'
      "2": { name: entity.name.variable.declaration.cpp2 }
      "3": { name: punctuation.separator.colon.cpp2 }
    end: (?<=;)
    patterns:
    - include: '#assignment'

  assignment:
    name: meta.assignment.cpp2
    begin: |
      (?x)
      (=)\s*
    beginCaptures:
      "1": { name: keyword.operator.assignment.cpp2 }
    end: (?<=;)
    endCaptures:
      "0": { name: punctuation.terminator.statement.cpp2 }
    patterns:
    - include: '#expression'

  function-definition:
    name: meta.definition.function.cpp2
    begin: |
      (?x)
      ({{identifier}})
      (?=\s*[:]\s*[\(|<])
    beginCaptures:
      "1": { name: entity.name.function.declaration.cpp2 }
    end: (?<=[\};])
    patterns:
    - include: '#function-typing'
    - include: '#scoped-code-block'
    - include: '#expression'

  unnamed-function:
    name: meta.definition.unnamed-function.cpp2
    begin: (:)(?=[\s*[\(<]])
    beginCaptures:
      "1": { name: punctuation.separator.colon.cpp2 }
    end: (?<=[\};])
    patterns:
    - include: '#function-type'
    - include: '#scoped-code-block'
    - include: '#expression'

  operator-definition:
    name: meta.definition.operator.cpp2
    begin: |
      (?x)
      (operator)
      (=
      |\+|-|\*|/|%|\+=|-=|\*=|/=|%=
      |<<|>>|&|\||\^|<<=|>>=|&=|\|=|\^=
      |&&|\|\||&&=|\|\|=
      |==|!=|<|>|<=|>=|<=>
      |\(\)|\[\]
      )
      (?=\s*[:]\s*[\(])
    beginCaptures:
      "1": { name: keyword.other.operator.cpp2 }
      "2": { name: keyword.operator.cpp2 }
    end: (?<=[\};])
    patterns:
    - include: '#function-typing'
    - include: '#scoped-code-block'
    - include: '#expression'

  scoped-code-block:
    begin: (\{)
    beginCaptures:
      "1": { name: punctuation.curlybrace.open.cpp2 }
    end: (\})
    endCaptures:
      "1": { name: punctuation.curlybrace.close.cpp2 }
    patterns:
    - include: '#code-block-content'

  variable-modifier:
    name: storage.modifier.cpp2
    match: \b({{variable_modifier}})\b

  scoped-code-block-with-local-variables-start:
    begin: (\()
    beginCaptures:
      "1": { name: punctuation.parenthesis.open.cpp2 }
    end: (\))
    endCaptures:
      "1": { name: punctuation.parenthesis.close.cpp2 }
    patterns:
    - include: '#scoped-code-block-with-local-variables-start-content'
    name: meta.definition.scoped-code-block-with-local-variables-start.cpp2

  scoped-code-block-with-local-variables-start-content:
    patterns:
    - include: '#variable-modifier'
    - include: '#variable-inline-definition-typed'
    # - include: '#variable-inline-definition-auto'
    # - include: '#punctuation-comma'
 
  code-block-content:
    patterns:
    - include: '#cpp1-block'
    - include: '#comment'
    - include: '#statement'
    - include: '#scoped-code-block'

  comparison-operator:
    name: keyword.operator.comparison.cpp2
    match: |
      (?x)
      ( == | != | < | > | <= | >= | <=> )
    
  logical-operator:
    name: keyword.operator.logical.cpp2
    match: |
      (?x)
      ( && | \|\| )

  bitwise-operator:
    name: keyword.operator.bitwise.cpp2
    match: |
      (?x)
      ( << | >> | & | \| | \^ )

  assignment-operator:
    name: keyword.operator.assignment.cpp2
    match: |
      (?x)
      ( \+= | -= | \*= | /= | %= | <<= | >>= | &= | \|= | \^= | &&= | \|\|= )

  arithmetic-operator:
    name: keyword.operator.arithmetic.cpp2
    match: |
      (?x)
      ( \+ | - | \* | / | % )

  range-operator:
    name: keyword.operator.range.cpp2
    match: |
      (?x)
      ( \.\.= | \.\.< )

  binary-operator:
    patterns:
    - include: '#comparison-operator'
    - include: '#logical-operator'
    - include: '#bitwise-operator'
    - include: '#assignment-operator'
    - include: '#arithmetic-operator'
    - include: '#range-operator'

  unary-operator:
    name: keyword.operator.unary.cpp2
    match: |
      (?x)
      (?<={{namespaced_identifier}})
      (
        \+\+ | -- |
        &    | \$ |
        \.
      )

  square-brackets-operator:
    name: keyword.operator.square-brackets.cpp2
    begin: (\[)
    beginCaptures:
      "1": { name: punctuation.squarebracket.open.cpp2 }
    end: (\])
    endCaptures:
      "1": { name: punctuation.squarebracket.close.cpp2 }
    patterns:
    - include: '#expression'
  
  operators:
    patterns:
    - include: '#binary-operator'
    - include: '#unary-operator'
    - include: '#square-brackets-operator'
    - name: storage.keyword.operator-move.cpp2
      match: \b(move)\b

  if:
    name: meta.control.if.cpp2
    begin: \b(if)\b
    beginCaptures:
      "1": { name: keyword.control.if.cpp2 }
    end: (?=[\{])
    patterns:
    - include: '#expression'
  
  else:
    name: meta.control.else.cpp2
    begin: \b(else)\b
    beginCaptures:
      "1": { name: keyword.control.else.cpp2 }
    end: (?=[\{])

  else-if:
    name: meta.control.else-if.cpp2
    begin: \b(else)\b\s*\b(if)\b
    beginCaptures:
      "1": { name: keyword.control.else.cpp2 }
      "2": { name: keyword.control.if.cpp2 }
    end: (?=[\{])
    patterns:
    - include: '#expression'

  labeled-while:
    name: meta.control.while.cpp2
    begin: |
      (?x)
      ({{identifier}})\s*
      ({{colon}})
      \b(while)\b
    beginCaptures:
      "1": { name: entity.name.label.cpp2 }
      "2": { name: punctuation.separator.colon.cpp2 }
      "3": { name: keyword.control.while.cpp2 }
    end: (?=[\{;]|next)
    patterns:
    - include: '#expression'

  while:
    name: meta.control.while.cpp2
    begin: \b(while)\b
    beginCaptures:
      "1": { name: keyword.control.while.cpp2 }
    end: (?=[\{;]|next)
    patterns:
    - include: '#expression'
  
  continue:
    name: meta.control.continue.cpp2
    match: |
      (?x)
      \b(continue)\s*
      \b({{identifier}})?
    captures:
      "1": { name: keyword.control.continue.cpp2 }
      "2": { name: entity.name.label.cpp2 }

  break:
    name: meta.control.break.cpp2
    match: |
      (?x)
      \b(break)\s*
      \b({{identifier}})?
    captures:
      "1": { name: keyword.control.break.cpp2 }
      "2": { name: entity.name.label.cpp2 }

  next:
    name: meta.control.next.cpp2
    begin: \b(next)\b
    beginCaptures:
      "1": { name: keyword.control.next.cpp2 }
    end: (?=[\{;]|do)
    patterns:
    - include: '#expression'

  labeled-do:
    name: meta.control.labeled-do.cpp2
    begin: |
      (?x)
      ({{identifier}})\s*
      ({{colon}})
      \b(do)\b
    beginCaptures:
      "1": { name: entity.name.label.cpp2 }
      "2": { name: punctuation.separator.colon.cpp2 }
      "3": { name: keyword.control.do.cpp2 }
    end: (?=[\{])
    patterns:
    - include: '#expression'

  do:
    name: meta.control.do.cpp2
    begin: \b(do)\b
    beginCaptures:
      "1": { name: keyword.control.do.cpp2 }
    end: (?=[\{])
    patterns:
    - include: '#parenthesized-parameters'
    - include: '#expression'

  labeled-for:
    name: meta.control.labeled-for.cpp2
    begin: |
      (?x)
      ({{identifier}})\s*
      ({{colon}})
      \b(for)\b
    beginCaptures:
      "1": { name: entity.name.label.cpp2 }
      "2": { name: punctuation.separator.colon.cpp2 }
      "3": { name: keyword.control.for.cpp2 }
    end: (?=[\{]|next|do)
    patterns:
    - include: '#expression'
    - include: '#unnamed-function'

  for:
    name: meta.control.for.cpp2
    begin: \b(for)\b
    beginCaptures:
      "1": { name: keyword.control.for.cpp2 }
    end: (?=[\{]|next|do)
    patterns:
    - include: '#expression'
    - include: '#unnamed-function'

  new:
    name: meta.control.new.cpp2
    patterns:
      - begin: \b(new)\.(unique)\b
        beginCaptures:
          "1": { name: keyword.control.new.cpp2 }
          "2": { name: keyword.control.new.unique.cpp2 }
        end: (?<=[>])
        patterns:
        - include: '#type-inside-angle-brackets'
      - begin: \b(new)\.(shared)\b
        beginCaptures:
          "1": { name: keyword.control.new.cpp2 }
          "2": { name: keyword.control.new.shared.cpp2 }
        end: (?<=[>])
        patterns:
        - include: '#type-inside-angle-brackets'
      - begin: \b(new)\b
        beginCaptures:
          "1": { name: keyword.control.new.cpp2 }
        end: (?<=[>])
        patterns:
        - include: '#type-inside-angle-brackets'
      - begin: \b(gc)\.(new)\b
        beginCaptures:
          "1": { name: keyword.control.gc.cpp2 }
          "2": { name: keyword.control.new.cpp2 }
        end: (?<=[>])
        patterns:
        - include: '#type-inside-angle-brackets'
      - match: \b(delete)\b
        captures:
          "1": { name: keyword.control.delete.cpp2 }
  
  type-inside-angle-brackets:
    name: meta.type.inside-angle-brackets.cpp2
    begin: ({{template_begin}})
    beginCaptures:
      "1": { name: punctuation.anglebracket.open.cpp2 }
    end: (>)
    endCaptures:
      "1": { name: punctuation.anglebracket.close.cpp2 }
    patterns:
    - include: '#type'

  inspect:
    name: meta.control.inspect.cpp2
    begin: |
      (?x)
      \b(inspect)\b
    beginCaptures:
      "1": { name: keyword.control.inspect.cpp2 }
    end: (?<=[\}])
    patterns:
    - include: '#inspected-expression'
    - include: '#inspect-return-type'
    - include: '#inspect-block'

  inspected-expression:
    begin: (?<=\b(inspect)\b)\s*
    end: (?=->)
    endCaptures:
      "1": { name: keyword.control.inspect.cpp2 }
    patterns:
    - include: '#expression'

  inspect-return-type:
    begin: (->)\s*
    beginCaptures:
      "1": { name: keyword.control.inspect.cpp2 }
    end: (?=\{)
    patterns:
    - include: '#type'

  inspect-block:
    begin: (\{)
    beginCaptures:
      "1": { name: punctuation.curlybrace.open.cpp2 }
    end: (\})
    endCaptures:
      "1": { name: punctuation.curlybrace.close.cpp2 }
    patterns:
    - include: '#is'
    - include: '#expression'

  is:
    name: meta.control.is.cpp2
    begin: \b(is)\b\s*
    beginCaptures:
      "1": { name: keyword.control.is.cpp2 }
    # `=` in inspect, `{` in if.
    end: (?=[\{=)\,])
    patterns:
    - include: '#expression'
    - include: '#parenthesized-parameters'

  as:
    name: meta.operator.as.cpp2
    begin: \b(as)\b\s*
    beginCaptures:
      "1": { name: keyword.control.operator.as.cpp2 }
    end: (?=[\{=)\,])
    patterns:
    - include: '#type'

  cast:
    name: meta.operator.cast.cpp2
    begin: \b(unchecked_narrow|unchecked_cast)\b\s*
    beginCaptures:
      "1": { name: keyword.operator.cast.cpp2 }
    end: (?<=[>])
    patterns:
    - include: '#type-inside-angle-brackets'

  function-typing:
    name: meta.typing.cpp2
    begin: (:)(?=[\s*[\(<]])
    beginCaptures:
      "1": { name: punctuation.separator.colon.cpp2 }
    end: (?=\s*(?=[=;]))
    patterns:
    - include: '#function-type'

  type:
    name: meta.type.cpp2
    patterns:
    - include: '#function-type'
    - include: '#type-template-instance'
  #   - include: '#type-builtin'
    - include: '#type-name'
    - include: '#pointer-type'

  pointer-type:
    begin: (\*)
    beginCaptures:
      "1": { name: keyword.operator.pointer.cpp2 }
    end: (?=\s*(?=[=;]))
    patterns:
    - include: '#type'

  # type-builtin:
  #   match: \b(string|bool|i8|u8|i16|u16|i32|u32|i64|u64|f32|f64)\b
  #   captures:
  #     '1':
  #       name: keyword.type.cpp2

  typing:
    name: meta.typing.cpp2
    begin: (:)
    beginCaptures:
      "1": { name: punctuation.separator.colon.cpp2 }
    end: (?=\s*(?=[=;]))
    patterns:
    - include: '#type'

  type-name:
    patterns:
    - match: ({{identifier}})\s*(::)
      captures:
        '1': { name: entity.name.namespace.cpp2 }
        '2': { name: punctuation.static-accessor.cpp2 }
    - match: (::)\s*({{identifier}})
      captures:
        '1': { name: punctuation.static-accessor.cpp2 }
        '2': { name: entity.name.type.cpp2 }
    - name: entity.name.type.cpp2
      match: '{{identifier}}'

  type-template-instance:
    name: meta.type.template-instance.cpp2
    begin: |
      (?x)
      {{namespaced_identifier}}\s*
      ({{template_begin}})
    beginCaptures:
      "1": 
        patterns: 
        - include: '#namespace-access'
      "2": { name: entity.name.type.cpp2 }
      "3": { name: punctuation.template.begin.cpp2 }
    end: (>)
    endCaptures:
      "1": { name: punctuation.template.end.cpp2 }
    patterns:
    - name: meta.type.template-instance-parameter.cpp2
      patterns:
      - include: '#type-expression'
      - include: '#expression'
    - include: '#punctuation-comma'

  function-return-type-separator:
    name: punctuation.separator.function-return-type.cpp2
    match: '->'

  function-type:
    name: meta.function-type.cpp2
    begin: |
      (?x)
      (?=[\(<])
    end: (?=[=;])
    patterns:
    - include: '#template'
    - include: '#parenthesized-parameters'
    - include: '#function-trailing-return'
  


  function-trailing-return:
    begin: |
      (?x)
      (->)\s*
      ({{return_modifier}})?\s*
    beginCaptures:
      "1": { name: punctuation.separator.function-return-type.cpp2 }
      "2": { name: storage.modifier.cpp2 }
    end: (?=[=;])
    patterns:
    - include: '#type-expression'

  parameter-name:
    match: |
      (?x)
      ({{identifier}})
    captures:
      '1': { name: entity.name.variable.parameter.cpp2 }

  this:
    match: \bthis\b
    captures:
      "0": { name: keyword.this.cpp2 }

  untyped-parameter:
    name: meta.untyped-parameter.cpp2
    begin: |
      (?x)
      (?:\b({{parameter_modifier}})\b\s+)?
      ({{identifier}})\s*
    beginCaptures:
      "1":  { name: storage.modifier.cpp2 }
      "2":
        patterns:
        - include: '#this'
        - include: '#parameter-name'
    end: (?=[\)\,])

  default-value:
    name: meta.default-value.cpp2
    begin: |
      (?x)
      (=)\s*
    beginCaptures:
      "1": { name: keyword.operator.assignment.cpp2 }
    end: (?=[,\)])
    patterns:
      - include: '#expression'

  typed-parameter:
    name: meta.typed-parameter.cpp2
    begin: |
      (?x)
      (?:\b({{parameter_modifier}})\b\s+)?
      ({{identifier}})\s*
      (:)\s*
    beginCaptures:
      "1": { name: storage.modifier.cpp2 }
      "2": { name: entity.name.type.declaration.cpp2 }
      "3": { name: punctuation.separator.colon.cpp2 }
    end: (?=[\)\,])
    patterns:
    - include: '#type-name'
    - include: '#default-value'

  parameter:
    patterns:
    - include: '#typed-parameter'
    - include: '#untyped-parameter'

  parenthesized-parameters:
    name: meta.function.parameters.cpp2
    begin: \(
    beginCaptures:
      '0': {name: punctuation.definition.parameters.begin.cpp2}
    end: \)
    endCaptures:
      '0': {name: punctuation.definition.parameters.end.cpp2}
    patterns:
    - include: '#comment'
    - include: '#parameter'
    - include: '#punctuation-comma'

  # enum-declaration:
  #   name: meta.enum.cpp2
  #   begin: \b(enum)\b\s+
  #   beginCaptures:
  #     '1': { name: keyword.other.enum.cpp2 }
  #   end: (?<=\})
  #   patterns:
  #   - include: '#enum-name'
  #   - begin: \{
  #     beginCaptures:
  #       '0': { name: punctuation.definition.enum.open.cpp2 }
  #     end: \}
  #     endCaptures:
  #       '0': { name: punctuation.definition.enum.open.cpp2 }
  #     patterns:
  #     - include: '#comment'
  #     - begin: ({{identifier}})
  #       beginCaptures:
  #         '1': { name: variable.other.enummember.cpp2 }
  #       end: (?=[,\n\}])
  #       patterns:
  #       - include: '#struct-definition'

  comment:
    patterns:
    - name: comment.block.cpp2
      begin: /\*
      beginCaptures:
        '0': { name: punctuation.definition.comment.cpp2 }
      end: \*/
      endCaptures:
        '0': { name: punctuation.definition.comment.cpp2 }
    - begin: (^\s+)?(?=//)
      beginCaptures:
        '1': { name: punctuation.whitespace.comment.leading.cpp2 }
      end: (?=$)
      patterns:
      - name: comment.block.documentation.cpp2
        begin: (?<!/)///(?!/)
        beginCaptures:
          '0': { name: punctuation.definition.comment.cpp2 }
        end: (?=$)
      - name: comment.line.double-slash.cpp2
        begin: (?<!/)//(?:(?!/)|(?=//))
        beginCaptures:
          '0': { name: punctuation.definition.comment.cpp2 }
        end: (?=$)

  function-call:
    name: meta.function-call.cpp2
    begin: |
      (?x)
      {{namespaced_identifier}}\s*
      (?=\()
    beginCaptures:
      "1": 
        patterns: 
        - include: '#namespace-access'
      "2": { name: entity.name.function.cpp2 }
    end: (?<=\))
    patterns:
      - include: '#function-arguments'

  function-name:
    patterns:
      - match: |
          (?x)
            \b ({{identifier}}) \b
        captures:
          '1': { name: entity.name.function.cpp2 }

  function-arguments:
    name: meta.function.arguments.cpp2
    begin: \(
    beginCaptures:
      '0': {name: punctuation.definition.arguments.begin.cpp2}
    end: \)
    endCaptures:
      '0': {name: punctuation.definition.arguments.end.cpp2}
    patterns:
    - include: '#comment'
    - include: '#expression'
    - include: '#punctuation-comma'

  tuple:
    name: meta.tuple.cpp2
    begin: \(
    beginCaptures:
      '0': {name: punctuation.definition.tuple.begin.cpp2}
    end: \)
    endCaptures:
      '0': {name: punctuation.definition.tuple.end.cpp2}
    patterns:
    - include: '#comment'
    - include: '#expression'
    - include: '#punctuation-comma'

  boolean:
    name: constant.language.boolean.cpp2
    match: \b(true|false)\b
  
  numeric-range:
    comment: This is a special case for range operator `..` that starts with a number. We need it to be a separate rule to avoid conflicts with regular numeric literals.
    match: "(?<!\\w)\\d+\\.\\.(=|<)"
    captures:
      '0':
        patterns:
        - begin: "(?=.)"
          end: "$"
          patterns:
          - match: "(?<!\\w)\\d+"
            name: constant.numeric.decimal.cpp2
          - match: \.\.(=|<)
            name: keyword.operator.range.cpp2

  numeric:
    comment: TODO taken from C# as is. Need to modify.
    match: "(?<!\\w)\\.?\\d(?:(?:[0-9a-zA-Z_\\.]|_)|(?<=[eE])[+-])*"
    captures:
      '0':
        patterns:
        - begin: "(?=.)"
          end: "$"
          patterns:
          # Decimal number (with optional thousands separator) with mandatory decimal part (with optional thousands separator) and optional exponent (also with optional thousands separator)
          - match: "(\\G(?=[0-9.])(?!0[xXbB]))([0-9](?:[0-9]|((?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))*)?((?:(?<=[0-9])|\\.(?=[0-9])))([0-9](?:[0-9]|((?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))*)?((?<!_)([eE])(\\+?)(\\-?)((?:[0-9](?:[0-9]|(?:(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))*)))?([fFdDmM](?!\\w))?$"
            captures:
              '2':
                name: constant.numeric.decimal.cpp2
                patterns:
                - match: "(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])"
                  name: constant.numeric.other.separator.thousands.cpp2
              '3':
                name: constant.numeric.other.separator.thousands.cpp2
              '4':
                name: constant.numeric.other.separator.decimals.cpp2
              '5':
                name: constant.numeric.decimal.cpp2
                patterns:
                - match: "(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])"
                  name: constant.numeric.other.separator.thousands.cpp2
              '6':
                name: constant.numeric.other.separator.thousands.cpp2
              '8':
                name: constant.numeric.other.exponent.cpp2
              '9':
                name: keyword.operator.arithmetic.cpp2
              '10':
                name: keyword.operator.arithmetic.cpp2
              '11':
                name: constant.numeric.decimal.cpp2
                patterns:
                - match: "(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])"
                  name: constant.numeric.other.separator.thousands.cpp2
              '12':
                name: constant.numeric.other.suffix.cpp2
          # Binary number (with optional thousands separator)
          - match: "(\\G0[bB])([01_](?:[01_]|((?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))*)((?:(?:(?:(?:(?:[uU]|[uU]l)|[uU]L)|l[uU]?)|L[uU]?)|[fFdDmM])(?!\\w))?$"
            captures:
              '1':
                name: constant.numeric.other.preffix.binary.cpp2
              '2':
                name: constant.numeric.binary.cpp2
                patterns:
                - match: "(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])"
                  name: constant.numeric.other.separator.thousands.cpp2
              '3':
                name: constant.numeric.other.separator.thousands.cpp2
              '4':
                name: constant.numeric.other.suffix.cpp2
          # Hexadecimal number (with optional thousands separator)
          - match: "(\\G0[xX])([0-9a-fA-F](?:[0-9a-fA-F]|((?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))*)((?:(?:(?:(?:(?:[uU]|[uU]l)|[uU]L)|l[uU]?)|L[uU]?)|[fFdDmM])(?!\\w))?$"
            captures:
              '1':
                name: constant.numeric.other.preffix.hex.cpp2
              '2':
                name: constant.numeric.hex.cpp2
                patterns:
                - match: "(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])"
                  name: constant.numeric.other.separator.thousands.cpp2
              '3':
                name: constant.numeric.other.separator.thousands.cpp2
              '4':
                name: constant.numeric.other.suffix.cpp2
          # Integral number (with optional thousands separator) with no decimal part and optional exponent (also with optional thousands separator)
          - match: "(\\G(?=[0-9.])(?!0[xXbB]))([0-9](?:[0-9]|((?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))*)((?<!_)([eE])(\\+?)(\\-?)((?:[0-9](?:[0-9]|(?:(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))*)))?((?:(?:(?:(?:(?:[uU]|[uU]l)|[uU]L)|l[uU]?)|L[uU]?)|[fFdDmM])(?!\\w))?$"
            captures:
              '2':
                name: constant.numeric.decimal.cpp2
                patterns:
                - match: "(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])"
                  name: constant.numeric.other.separator.thousands.cpp2
              '3':
                name: constant.numeric.other.separator.thousands.cpp2
              '5':
                name: constant.numeric.other.exponent.cpp2
              '6':
                name: keyword.operator.arithmetic.cpp2
              '7':
                name: keyword.operator.arithmetic.cpp2
              '8':
                name: constant.numeric.decimal.cpp2
                patterns:
                - match: "(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])"
                  name: constant.numeric.other.separator.thousands.cpp2
              '9':
                name: constant.numeric.other.suffix.cpp2
          # Capture the rest as an invalid numeric literal
          - match: "(?:(?:[0-9a-zA-Z_\\.]|_)|(?<=[eE])[+-])+"
            name: invalid.illegal.constant.numeric.cpp2

  string:
    name: string.quoted.double.cpp2
    begin: "\""
    beginCaptures:
      "0": { name: punctuation.definition.string.begin.cpp2 }
    end: "\""
    endCaptures:
      "0": { name: punctuation.definition.string.end.cpp2 }
    patterns:
    - name: constant.character.escape.cpp2
      match: "\\\\."

  string-literals:
    name: string.quoted.double.cpp2
    begin: (u|U|u8|L)(?=")
    beginCaptures:
      "1": { name: keyword.other.string-literals.cpp2 }
    end: (?<=")
    patterns:
    - include: "#string"

  raw-string:
    name: string.quoted.double.cpp2
    begin: (R|uR|u8R|UR|LR)("\()
    beginCaptures:
      "1": { name: keyword.other.string-literals.cpp2 }
      "2": { name: punctuation.definition.string.begin.cpp2 }
    end: (\)")
    endCaptures:
      "1": { name: punctuation.definition.string.end.cpp2 }

  character:
    name: string.quoted.single.cpp2
    begin: "'"
    end: "'"
    patterns:
    - name: constant.character.escape.cpp2
      match: "\\\\."

  nullptr:
    name: constant.language.nullptr.cpp2
    match: \b(nullptr)\b

  literals:
    patterns:
    - include: "#numeric"
    - include: "#string-literals"
    - include: "#raw-string"
    - include: "#string"
    - include: "#character"
    - include: "#nullptr"
    - include: "#boolean"

  cpp1-block:
    patterns:
    - name: meta.embedded.block.cpp1
      begin: /\*\s*lang:cpp\s*\*/
      beginCaptures:
        '0': { name: comment.block.start-of.cpp1.cpp2 }
      end: /\*\s*lang:end\s*\*/
      endCaptures:
        '0': { name: comment.block.end-of.cpp1.cpp2 }
      patterns:
      - include: 'source.cpp'

  known-std-symbols:
    patterns:
      - name: meta.entity.known-primitive-name.cpp2
        match: |
          (?x)
          (int|char|short|long|float|double|bool|void)\b
        captures:
          '1': { name: entity.name.type.primitive.cpp2 }
      - name: meta.entity.known-std-variable-name.cpp2
        match: |
          (?x)
          (std)\s*
          (::)\s*
          (cout|endl|cin|cerr|clog
          |wcout|wendl|wcin|wcerr|wclog
          )\b
        captures:
          '1': { name: entity.name.namespace.cpp2 }
          '2': { name: punctuation.static-accessor.cpp2 }
          '3': { name: entity.name.variable.cpp2 }
      - name: meta.entity.known-std-function-name.cpp2
        match: |
          (?x)
          (std)\s*
          (::)\s*
          (make_shared|make_unique|make_pair|make_tuple|make_optional|make_any
          )\b
          (?=[(])
        captures:
          '1': { name: entity.name.namespace.cpp2 }
          '2': { name: punctuation.static-accessor.cpp2 }
          '3': { name: entity.name.function.cpp2 }
      - name: meta.entity.known-std-function-name.template.cpp2
        begin: |
          (?x)
          (std)\s*
          (::)\s*
          (make_shared|make_unique|make_pair|make_tuple|make_optional|make_any
          |dynamic_pointer_cast
          )\b
          (?=<)
        beginCaptures:
          '1': { name: entity.name.namespace.cpp2 }
          '2': { name: punctuation.static-accessor.cpp2 }
          '3': { name: entity.name.function.cpp2 }
        end: (?<=[>])
        patterns:
        - include: '#type-inside-angle-brackets'
      - name: meta.entity.known-std-type-name.cpp2
        match: |
          (?x)
          (std)\s*
          (::)\s*
          (string|thread|mutex|condition_variable)\b
        captures:
          '1': { name: entity.name.namespace.cpp2 }
          '2': { name: punctuation.static-accessor.cpp2 }
          '3': { name: entity.name.type.cpp2 }
      - name: meta.entity.known-std-type-name.template.cpp2
        begin: |
          (?x)
          (std)\s*
          (::)\s*
          (vector|map|set|list|queue|stack|priority_queue
          |pair|tuple
          |function
          |lock_guard|unique_lock
          |atomic
          )\b
        beginCaptures:
          '1': { name: entity.name.namespace.cpp2 }
          '2': { name: punctuation.static-accessor.cpp2 }
          '3': { name: entity.name.type.cpp2 }
        end: (?<=[>])
        patterns:
        - include: '#type-inside-angle-brackets'
      
  decltype:
    name: keyword.other.decltype.cpp
    begin: |
      (?x)
      \b(decltype)\b\s*
      (\()
    beginCaptures:
      "1": { name: storage.type.decltype.cpp }
    end: (\))
    patterns:
    - include: '#expression'

scopeName: source.cpp2
